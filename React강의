싱글페이지 애플리케이션

- 페이지가 새로고침 되지않고 자연스럽게 데이터를 불러오고 입력하는 기능

사용이유
ex) 닉네임을 바꿨을때 이전에 남긴 게시물들에 닉네임을 일괄적으로 바꾸는데 효과적

리액트의 특징

1. 선언적이다

- 리액트는 대화형 UI를 작성하기에 유리하다
- 데이터가 변경되었을 때 효율적으로 렌더링을 수행할 수 있도록 한다

2. 컴포넌트 기반이다

- 캡슐화된 컴포넌트가 스스로 상태를 관리하고 복잡한 UI도 효과적으로 구성할 수 있음

3. 한 번 배워서 어디에서나 사용하기

- 기존소스를 불필요하게 다시 작성하지 않고 새 기능을 개발 할 수 있다
- Node서버에서 렌더링을 할 수도 있고, 온라인 웹에서도 사용 가능하다
- React Native를 쓰면 모바일 앱도 만들 수 있다

리액트의 작동원리

1. Virtual DOm을 사용하여 UI를 빠르게 랜더링한다
2. virtual DOM은 또한 이전 UI 상태를 메모리에 유지해서, 변경될 UI의 최소 집합을 계산하는 로직을 포함하는데 이로써 좋은 성능도 낸다
3. 단방향 데이터 흐름(Flux)를 갖는다

장점

1. React 공신 문서 가이드와 방대한 커뮤니티, 자료를 쉽게 접하고 배울 수 있다
2. Controller, directive, template, model, view처럼 로직을 분리하는 것이 아닌 Component하나로 관리를 한다 (이게 view 역할을 담당)
3. 성능이 뛰어난 가비지 컬렉터, 메모리 관리 기능을 지원한다
4. 다른 framework나 라이브러리와 병행해서 사용할 수 있다. 이는 개발이 이미 완료된 프로젝트에도 적절히 녹여낼 수 있는 확장성도 포함한다

단점

1. IE8 이하 버전은 지원하지 않는다
2. view 이외의 기능은 직접 구현하거나 라이브러리를 사용해서 구현해야 하기에 javascript 배경지식이 필수 선행이다
3. 데이터 모델링, 라우팅, Ajax 등 기능 지원이 안된다
4. 로딩시간이 길다 ★
5. 웹의 궁극정 지향점과 다소 동떨어져있다

- 웹의 핵심: 모든 것을 streaming하며, 페이지들은 HTML 태그들을 내포하고 가벼운 response만 브라우징한다
- 리액트: 사이트에 필요한 자바스크립트를 처음에는 공백 페이지를 띄우며 다운로드한다.
  한번 다운로드 한 이후에는 다시 리소스를 다운하지 않아도 되지만, 처음보이는 것이 streaming 과의 차이다

리렌더링 되는경우

1. props 또는 state값이 바뀔경우
2. 부모컴포넌트가 리렌더링 되었을경우

리렌더링이 많이될경우 속도저하를 초래할수 있어 가급적 필요한 경우만 리렌더링되게 설정해야한다
※ 함수 컴포넌트중 memo컴포넌트를 사용하면 부모요소가 리렌더링되었을때 자식요소도 리렌더링되는경우를 막아줄수있다( import { memo } from 'react')

render(){}안에 setState 쓰지말것
렌더링될때마다 실행되서 속도저하 초래

메모이제이션
기존에 수행한 연산의 결과값을 어딘가에 저장해두고 동일한 입력이 들어오면 재활용하는 프로그래밍기법

useMemo()

- 메모이제이션된 값을 반환하는 함수
- 쓰는이유: state값이 변할 경우에만 연산을 실행할 수 있도록 useMemo를 사용해 변하는 state 변수에 의존하도록 등록
- (리렌더링이 발생할 경우 특정변수가 변할때에만 useMemo에 등록한 함수가 실행되도록 처리하면 불필요한 연산을 막을수있음)

useCallback()

- 메모이제이션된 함수를 반환하는 함수

사용처

- 자식 컴포넌트에 props로 함수를 전달할 경우
- 외부에서 값을 가져오는 api를 호출하는 경우
